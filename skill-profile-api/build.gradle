plugins {
	id 'org.springframework.boot' version '2.7.3'
	id 'io.spring.dependency-management' version '1.0.13.RELEASE'
	id 'java'
	id 'eclipse'
	id 'com.github.edeandrea.xjc-generation' version '1.6'
	id 'com.diffplug.eclipse.apt' version '3.37.2'
}

group = 'com.skill.profile'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

ext {
	set('springCloudVersion', "2021.0.4")
	jaxbVersion = '2.2.11'
	mapstructVersion = '1.5.2.Final'
	lombokVersion = '1.18.22'
	lombokMapstructBinding = '0.2.0'
	generatedMapperSourcesDir = "traget/main/generate-src/mapstruct"
}

configurations.testImplementation {
    exclude group: 'com.boundary', module: 'high-scale-lib'
}
configurations.implementation {
    exclude group: 'com.boundary', module: 'high-scale-lib'
}
dependencies {

	//implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	//implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
	
	implementation 'org.springframework.boot:spring-boot-starter-data-cassandra'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.cloud:spring-cloud-starter-config'
	//implementation 'org.springframework.kafka:spring-kafka'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	
	implementation "com.datastax.cassandra:cassandra-driver-core:2.1.9"
	
	implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
	
	implementation "org.mapstruct:mapstruct:${mapstructVersion}"
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
    annotationProcessor "org.projectlombok:lombok-mapstruct-binding:${lombokMapstructBinding}"
    
	implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.6.11'

	compileOnly "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
	
	implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.2.11'
	
	//implementation group: 'com.datastax.oss', name: 'java-driver-core', version: '4.13.0'
	
	xjc "javax.xml.bind:jaxb-api:${jaxbVersion}"
	xjc "com.sun.xml.bind:jaxb-impl:${jaxbVersion}"
	xjc "com.sun.xml.bind:jaxb-xjc:${jaxbVersion}"
	xjc "com.sun.xml.bind:jaxb-core:${jaxbVersion}"
	xjc "javax.activation:activation:1.1.1"

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
//	testImplementation ('org.cassandraunit:cassandra-unit-spring:4.3.1.0'){
//		exclude group: 'com.boundary', module: 'high-scale-lib'
//	}
//	testImplementation 'org.cassandraunit:cassandra-unit:4.3.1.0'

	//implementation group: 'org.cassandraunit', name: 'cassandra-unit-shaded', version: '4.3.1.0'

	//testImplementation group: 'org.cassandraunit', name: 'cassandra-unit-spring', version: '4.3.1.0'
	//testImplementation group: 'org.cassandraunit', name: 'cassandra-unit', version: '4.3.1.0'
	
	testAnnotationProcessor "org.mapstruct:mapstruct-processor:${mapstructVersion}"
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
	}
}

xjcGeneration {
  defaultAdditionalXjcOptions = ['encoding': 'UTF-8']
  defaultBindingFile = file 'misc/resources/schema/bindings/binding.xjb'
  
  schemas {

	   schemas{
		  schemaRootDir = 'misc/resources/schema/xsd/skill-profile-api/'
		  schemaFile = 'skill-profile-api.xsd'
  		  generatedOutputRootDir = file "traget/main/generate-src/jaxb"
	   }
	   
  }
}

compileJava {
	options.compilerArgs += [
        '-Amapstruct.suppressGeneratorTimestamp=true',
        '-Amapstruct.suppressGeneratorVersionInfoComment=true',
        '-Amapstruct.verbose=true',
        '-Amapstruct.defaultComponentModel=spring'
    ]
	options.annotationProcessorPath = configurations.annotationProcessor
	options.setAnnotationProcessorGeneratedSourcesDirectory( file("$projectDir/traget/main/generate-src/mapstruct"))
}

tasks.named('test') {
	useJUnitPlatform()
}
